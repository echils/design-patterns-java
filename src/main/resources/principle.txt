设计模式常用的七大原则：
   1）单一职责原则(优秀的代码少用if..else,这样耦合度太高 ):
      [1] 降低类的复杂度,一个类只负责一项职责
      [2] 提高类的可读性,可维护性
      [3] 降低变更引起的风险
      [4] 类级别的单一原则或者方法级别的单一原则(只有类中方法足够少时,才可使用方法级别的单一原则)
   2）接口隔离原则
      [1] 接口的定义采用最小接口原则
      [2] 客户端不应该去依赖他不需要的接口
      [3] 如果一个类实现了一个接口,而这个接口中包含它用不到的方法,那么应该将这个方法抽离出来,单独建立一个接口,让有需要的去实现就好了.
   3）依赖倒转原则
      [1] 高层模块不应该依赖低层模块,二者都应该依赖其抽象
      [2] 抽象不应该依赖细节,细节应该依赖抽象
      [3] 依赖倒转的中心思想是面向接口编程
      [4] 依赖原则的设计理念:相对于细节的多变性,抽象的东西要稳定的多.以抽象为基础搭建的架构比以细节为基础的架构要稳定的多
      [5] 使用接口或者抽象类的目的是制定好规范,而不涉及任何具体的操作,把展现细节的任务交给他们的实现类去完成
      [6] 依赖传递的方式: (1) 接口传递  (2) 构造方法传递 (3) setter方式传递
      [7] 变量的声明类型尽量是抽象类或者接口,这样我们的变量引用和实际对象间就存在一个缓冲层,有利于程序扩展和优化
   4）里氏替换原则
      [1] 在使用继承时,遵循里氏替换原则,在子类中尽量不要重写父类的方法
      [2] 继承会增强两个类之间的耦合性,如果有有类似需求，那么通用的做法是：在适当的情况下,将原来的父类和子类的公共部分提取出来一个基础类，
          然后原来的父类和子类都继承这个基础类，将原有的继承关系去掉，通过聚合、组合、依赖的关系来替代
   5）开闭（OCP）原则
      [1] 软件的实体（类，模块，函数）应该对扩展开放（对提供方），对修改关闭（对使用方）。用抽象构建框架，用实现扩展细节
      [2] 当软件需要变化时，尽量通过拓展软件实体的行为来实现变化，而不是通过修改已有的代码来实现变化
   6）迪米特法则
      [1] 一个对象应该对其他对象保持最少的了解
      [2] 类与类关系越密切,耦合度越大：迪米特法则就是来尽量降低耦合
      [3] 迪米特法则也叫最少知道原则,即一个类对自己依赖的类知道的越少越好,也就是说:对于被依赖的类不管多么复杂,都尽量将逻辑封装在类的内部,
          对外除了提供public方法,不对外泄露任何信息
      [4] 迪米特法则: 只与直接的朋友通信
      [5] 直接的朋友: 每个对象都会与其他对象有耦合关系,只有两个对象之间有耦合关系,我们就说这两个对象之间是朋友关系,耦合的方式很多:
                     依赖、关联、组合、聚合等。其中我们称出现在成员变量、方法参数，方法返回值中的类为直接的朋友，而出现在局部变量中
                     的类则不是直接的朋友，也就是说，陌生的类最好不要以局部变量的形式出现在类的内部。
   7）合成复用原则
   　 [1] 尽量使用合成、聚合的方式，而不是继承