package com.github.pattern.bridge;

import org.junit.jupiter.api.Test;

/**
 * 桥接模式测试类
 *
 * @author echils
 */
public class BridgeTest {



    /*

        介绍：
             1）将实现与抽象放在两个不同的类层次中，是两个层次可以独立改变
             2）桥接模式基于类的最小设计原则，通过使用封装、聚合以及继承等行为让不同的类承担不同的职责，他的主要特点是把抽象与行为实现分来开来，
                从而可以保持各部分的独立性以及应对他们的功能扩展
        细节：
             1）识别出系统的独立的维度，实现了抽象和实现部分的分离，从而极大的提供了系统的灵活性，让抽象部分和实现部分独立开来，这有助于系统进行分层设计，从而产生更好的
                结构化系统
             2）对于系统的高层部分，只需要知道抽象部分和实现部分的接口就可以了，其他的部分由具体业务来完成
             3）桥接模式替代多层继承方案，可以减少子类的个数，降低系统的管理和维护成本
             4）桥接模式的引入怎家了系统的理解和设计难度，由于聚合关联关系建立在抽象层，要求开发者针对抽象进行设计和编程
             5）桥接模式要求正确识别出系统中两个独立化的维度，因此其使用范围有一定的局限性，即需要有这样的应用场景
             6）对于那些不希望使用继承或因为多层次继承导致系统类的个数急剧增加的系统，桥接模式尤为适用
             7）常见的应用场景：银行转账系统，消息管理系统

     */



    /**
     * 利用桥接模式完成银行的转账
     * 优点： 利用桥接模式，当需要添加一种新的转账方式或者新的用户时，只需新增一个类就可以了，对其他代码无影响
     */
    @Test
    public void testImprove() {
        Bank bank = new InternetBank(new EnterpriseUser());
        bank.transfer();
        bank = new ATMBank(new IndividualUser());
        bank.transfer();
    }


}
