package com.github.pattern.facade;

import org.junit.jupiter.api.Test;

/**
 * 外观模式测试类
 *
 * @author echils
 * @since 2020-01-02 20:06:15
 */
public class FacadeTest {

    /*

        介绍：
             1）外观模式，也叫过程模式：外观模式为子系统中的一组接口提供一个一致的界面，此模式定义了一个高层接口，这个接口使子系统更加容易使用
             2）外观模式通过定义一个一致的接口，用以屏蔽内部子系统的细节，使得调用断只需跟这个接口发生调用，而无需关系这个子系统的内部细节
             3）外观模式可以理解为转换一群接口，客户只要调用一个接口，而不是调用多个多个接口才能达到目的。
             4）外观模式就是解决多个复杂接口带来的使用困难，起到简化用户操作的作用
        细节：
             1）外观模式对外屏蔽了子系统的细节，因此外观模式的降低了客户端对子系统使用的复杂性
             2）外观模式降低客户端与子系统的耦合性，让子系统内部的模块更易维护和拓展
             3）通过合理的使用外观模式，可以帮我们更好的划分访问的层次
             4）当系统需要进行分层设计时，可以考虑使用facade模式
             5）在维护一个遗留的大型系统时，可能这个系统已经变得非常难以维护和扩展，此时可以考虑为新系统开发一个Facade类，来提供遗留系统
                的比较清晰简单的接口，让新系统与Facade类交互，提高复用性
             6）不能过多的或者不合理的使用外观模式，使用外观模式好，还是直接调用模块好，要以让系统有层次，更利于维护为目的。

     */


    /**
     * 通过外观模式，我们不需要知道内部子系统之间如何互相调用的细节，我们只要知道我们通过外观类的四个方法可以看电影就可以了
     * <p>
     * 通常情况下，我们要一场电影需要如下步骤：
     * 1）投影仪幕布放下来
     * 2）打开投影仪
     * 3）打开音响
     * 4) 调整音量
     * 5）关灯
     * 6）播放视频
     * 观看玩之后需要如下步骤：
     * 1）关闭视频
     * 2）开灯
     * 3）关闭音响
     * 4）关闭投影仪
     * 5）升起幕布
     */
    @Test
    public void test() {
        HomeFacade homeFacade = new HomeFacade();
        homeFacade.ready();
        homeFacade.start();
        homeFacade.end();
        homeFacade.restore();
    }

}
